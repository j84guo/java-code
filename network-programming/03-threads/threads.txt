Threads :
-created by extending Thread or implementing Runnable (and passing that to new Thread())
-the thread's run method is called indirectly, after saying thread.start()

Synchronized Blocks :
-synchronize a block of statements
-the object parameter is the monitor object
-only one thread can execute a block of code synchronized on the same monitor at a time
-notice that this provides a way to synchronize different kinds of accesses on a monitor, e.g. read or write
-Java provides no means to stop all other threads from using a shared resource. It can only prevent other threads that synchronize on the same object from using the shared resource.

synchronized (out) {
	// multiple writes to out stream
}

synchronized (this) {
	// access this
}

Synchronized Methods :
-implicitly synchronized on this

synchronized return-type method-name(param-list) makes a method's statements synchronized

Synchronization Alternatives :
-use local variables instead of class variables
-use primitive method arguments
-Strings are thread safe due to their immutability (StringBuilder is not)
-object arguments are in danger of having multiple threads accessing it
-constructors usually don't worry about threading
-create immutable classes by making all fields private and final
-use a thread-unsafe class as a private field only of a thread safe class

Atomic Types :
java.util.concurrent.atomic returns atomic data types.

Collections :
Collections.synchronizedSet/List/Map returns a thread safe wrapper. But note that multiple atomic operations still need to be synchronized.

Deadlock :
Deadlock occurs when two threads need exclusive access to the same set of resources and each thread holds the lock on a different subset of those resources. If neither thread is willing to
give up the resources it has, both threads come to an indefinite halt.

The most important technique for preventing deadlock is to avoid unnecessary synchronization. If there’s an alternative approach for ensuring thread safety, such as making objects immutable
or keeping a local copy of an object, use it. A general rule of thumb is access a set of shared resources in the same order!

Priority :
More important threads like user facing threads, should get a higher priority. Java marks priorities from 1 (low) to 10 (high).

Thread Scheduling :

Co-operative
-threads willingly share the CPU

Pre-emptive
-operating system scheduler times and co-ordinates threads on the CPU

Certain VM's are co-operative, while others are pre-emptive. Thus all threads should be designed to share the CPU and not to starve the other thread!

-It can block on I/O.
-It can block on a synchronized object.
-It can yield (to same priority threads). Thread.yield() (note that some real time OS VM's may ignore this)
-It can go to sleep (to any threads). Thread.sleep()
-It can join another thread.
-It can wait on an object.
-It can finish.
-It can be preempted by a higher-priority thread.

Joining threads :
One thread may need the result of another. The invoker of join() waits for the input thread to finish.

Waiting :
When one of the object wait() methods is invoked, the thread that invoked it releases the lock on the object it’s waiting on (though not any locks it possesses on other objects) and goes to
sleep. It remains asleep until one of three things happens:
-The timeout expires.
-The thread is interrupted.
-The object is notified. (similar to conditional variable method, notify() or notifyAll() are called on the object being waited on)
