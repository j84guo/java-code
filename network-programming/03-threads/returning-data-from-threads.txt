Introduction :

A thread class's (whether extending Thread or implementing Runnable) calculations can be stored in a field and accessed by a getter. However this leads to a race condition as the thread
must try to finish calculations before its field is accessed, possible leading to a NPE.


Solutions :

One naive solution is to implement POLLING, whereby the getter is repeatedly polled for data by the accessor class. However this is inefficient and may take compute time away from the
worker threads!

The more effective solution is to use CALLBACKS whereby the boss thread's class has some (static or non static) callbacl methods which the worker invokes upon completion. If multiple 
objects are interested in the worker's data, they can register themselves in a linked list by calling a method in the worker. Then the worker invokes callbacks for each interested object,
possible using an interface that the interested objects implement. This is aka the "observer" pattern.
