inheritance
abstract class
polymorphism
static object (access specifiers)

garbage collection
stack

sql joins
.net framework outline

/**********

Java :

**********/

// General
all data encapsulated within object, all exectuable statement within method, all objects instnace of class or array

8 primitive types : 
boolean - can be either true or false
char - single unicode character (such as ’A’)
byte - 8-bit signed integer
short - 16-bit signed integer
int - 32-bit signed integer
long - 64-bit signed integer
float - 32-bit signed floating point number
double - 64-bit signed floating point number
*** floating point numbers have NEGATIVE_INFINITY, POSITIVE_INFINITY, and NaN

-String is an array of char's (immutable)
-wrapper classes for the primitive types that let you work with them as if they were regular objects, eg. Integer
-The new keyword invokes the class Constructor eg. Integer example = new Integer(20);
-Java has no structs. In C++, structs are functionally equivalent to classes, except the members are public by default vs private by default in classes.
-int[] numbers = new int[10];
-dynamic collection :
	ArrayList, LinkedList
	<String>, indicates the list is composed of strings

// Garbage Collection 
https://www.dynatrace.com/resources/ebooks/javabook/how-garbage-collection-works/
http://stackoverflow.com/questions/3798424/what-is-the-garbage-collector-in-java

Eventually, we'll start getting a lot of garbage, and memory will be used for objects which aren't being used anymore. If this keeps going on, eventually the Java Virtual Machine will run out of space to make new objects. That's where the garbage collector steps in. The garbage collector will look for objects which aren't being used anymore, and gets rid of them, freeing up the memory so other new objects can use that piece of memory.

Heap : the area of memory used for dynamic allocation. The Operating system allocates heap in advance to be managed by JVM while program is running

// Access Specifiers
(members)
public - accessible to whole application
protected - accessible to class, package, subclasses
package-private/default - accessible to class, package
private - accessible to class

(classes) 
public - visible to whole application
package-private/default - visible to package

-static : only one copy
	If static is applied to a variable, it means that variable is common to all instances of a class.
	If static is applied to a method, it means the method is shared between all instances of the class. A static method cannot access any of the instance variables or methods of the class; only methods andvariables that share the static modifier.
	Nested classes can be static, but not top-level classes

-final 
	field : constant, cannot change
	method : cannot be overridden 
	class : no subclass permitted
	-cannot be applied to interface or abstract class (obviously, since they need to be implemented and inherited) 

// Inheritance
exends - superclass subclasss relationship
	child inherits non-private fields and methods from parent  

super() calls parent constructor, eg. called in child constructor

Interface : specifies some number of method signatures which any class that wants to implement this interface must have
	-no implementation
	-static fields
	-classes implement interfaces (can implement multiple)
	-not instantiated 

Abstract Class : Halfway between an interface and a regular class is the abstract class.
	-abstract methods belong to abstract class
	-non-static fields allowed
	-any amount of method implementation
	-not instantiated but can be subclassed/inherited

Polymorphism : Subclasses of a class can define their own unique behaviors and yet share some of the same functionality of the parent class.

Overloading : Aka. static polymorphism; a class has multiple functions of the same name. Parameter type and number varies, return type does not matter.
Overriding : Re-implement an inherited method, same argument list, return type. 



